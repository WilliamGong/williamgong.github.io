{"pages":[{"title":"about","text":"About Me我，William Gong，一个从没拿过奖的OIer，资深咸鱼，现就读于华南理工大学。虽然很喜欢打游戏，但技术都很菜，正所谓“人菜瘾还大”。8年Minecraft玩家，不过我是科技mod党，也玩其它的冒险类mod。同时我也是异星工厂玩 (cai) 家 (ji)，群星 200 小时玩 (cai) 家 (ji)。同时我还是Warframe萌新，现在段位6，欢迎各大佬指教。现在长期AFK中。 联系方式 Email: gtl119@live.com QQ: 1225575748 Warframe ID: WilliamGong","link":"/about/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"links","text":"友情链接Hexo Hexo Homepage Hexo Documents 朋友的 Blog infiBlog","link":"/links/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"Blog搭建实录-0 序言","text":"写在前面从0开始搭建这个博客到限制，已经折腾两天了。折腾的时候踩了不少坑，所以我想记录下我搭建这个Blog的过程，把搭建Blog的过程，我踩到的坑po出来，算是以示后人吧。（当然，我相信没什么人会看的） 关于这个Blog这个Blog由hexo搭建，通过Github Actions自动发布到Github Pages上。使用的主题用submodule的形式插入。 关于更新我会不定期更新，打算先把在写这篇post前过程写出来，之后满满填坑。所谓不定期更新呢，就是我想鸽多久就鸽多久啦！（咕咕咕咕咕咕咕）反正没人看（ 当前Blog状态（这是本地的）","link":"/2020/10/10/Blog%E6%90%AD%E5%BB%BA%E5%AE%9E%E5%BD%95-0_%E5%BA%8F%E8%A8%80/"},{"title":"Blog搭建实录-1 初始化hexo与建立git仓库","text":"初始化Hexo文件夹准备node.jsWindows在这里下载，然后一路安装。 Linux包管理工具，请。 安装Hexonpm install hexo-cli -g 建立Hexo文件夹首先，在本地见一个文件夹，名字最好是英文,然后 npx hexo install &lt;folder&gt; 之后 cd &lt;folder&gt; 最后 npm install 一个Hexo文件夹就这样初始化好了。 本地测试 其实是不需要的，我只是好奇而已。当然，之后这个操作是非常重要的，你可以把它当作熟悉Hexo操作。 首先，让Hexo生成静态网页 npx hexo generate 然后，启动Hexo的本地服务 npx hexo server 之后就可以访问localhost:4000访问本地的网页了。 建立Git仓库并上传到Github 如果你不知道什么是git, Github，你现在就可以把本Blog关了。 建立Github Pages发布仓库在Github上，建立一个名为\\&lt;username&gt;.github.io的仓库，然后放着。之后，Hexo文件夹用git初始化，commit之后push到Github。OK，其余的操作就主要在Github上进行了。","link":"/2020/10/10/Blog%E6%90%AD%E5%BB%BA%E5%AE%9E%E5%BD%95-1_%E5%88%9D%E5%A7%8B%E5%8C%96hexo%E4%B8%8E%E5%BB%BA%E7%AB%8Bgit%E4%BB%93%E5%BA%93/"},{"title":"Blog搭建实录-2 配置Github Actions","text":"Github Actions介绍 注：以下内容大部分参考了这篇post，这篇post讲的比我清楚多了，人家是专业的。 什么是Github Actions?Github Actions是Github自己推出的持续集成服务，可以自动地进行各种各样的构建并发布到正确的地方。在本Blog中，我就使用了Github Actions来自动构建Hexo的静态网页并将它发布到Github Pages上。这些构建，发布之类的操作，在Github Actions中被称为actions。用户可以将actions写成独立的脚本并供给其他人使用。Github建立了一个官方市场，可以找到我们需要的actions。 术语介绍 workflow（工作流）：指运行一次的所有流程； job（任务）：组成workflow的单元，一个workflow由多个job组成； step（步骤）：job执行时执行的单元，由多个action组成； action：这就不多说了吧。 实战获取 Personal Access Token打开你的Github 账户设置页，转到Developer settings -&gt; Personal access tokens，生成时记得勾选repo项，admin:repo_hook和workflow项。之后复制生成的字符串，回到hexo仓库，打开仓库设置，转到Secrets，把字符串以环境变量的形式存储。变量名凭喜好自取。 配置Actions首先我们在GitHub打开Hexo的仓库，转到actions选项。根据网页的提示，建立一个workflow。这样你就会进入一个编辑.yml文件的界面，文件就是workflow的配置文件。这时在右边有市场界面，让我们在里面搜”hexo”，可以看到许多发布hexo博客的actions，这里我选择的是hexo-deploy,选择版本，将代码框的内容粘贴到workflow文件中，按注释改一下配置，保存。 注意根据actions的不同，所需要的token/key类型也不同。有的使用Personal Access Token(PAT)，有的使用ssh key，具体看action的说明。我倾向于使用PAT，因为PAT只用存储在hexo仓库上。相比之下，用ssh key需要将公钥放在hexo仓库，私钥放在pages仓库，较为麻烦。 最后将hexo仓库push一下，actions就会自动运作，几分钟后Blog就可以访问了。","link":"/2020/10/10/Blog%E6%90%AD%E5%BB%BA%E5%AE%9E%E5%BD%95-2_%E9%85%8D%E7%BD%AEGithub_Actions/"},{"title":"“O泡果奶”app解析0 hash比对","text":"前言当我关注到这个app时，是我一个现居异地的朋友发的一条说说。其实早在几个小时前，宿舍里放出O泡果奶广告的声音时，我就体会过这个app的威力了，但我以为它只在我们学校内传播。直到我看见了那条说说。当我顺手转发了之后，十多条评论纷纷抱怨他们的经历，我一个朋友还给我发了他们大学流传的apk，我逐渐意识到不对劲。但真正使我打算认真分析这个app的，是我另一个朋友让我发这个apk的hash的消息。于是，我便走上了逆向工程之路。 hash比对的原因不同地方流传的apk，名字可能会不一样。就比如我手上的两个apk：“一份礼物.apk”和“存档人物修改2.0.apk”，要验证这两个apk是否是同一个，就只能比对hash。 获取hash这是“一份礼物.apk”的hash：这是“存档人物修改2.0.apk”的hash:显然二者不是同一个apk。后来跟朋友的hash比对，“一份礼物.apk”的hash与他的一致。","link":"/2020/10/14/O%E6%B3%A1%E6%9E%9C%E5%A5%B6app%E8%A7%A3%E6%9E%900_hash%E6%AF%94%E5%AF%B9/"},{"title":"“O泡果奶”app解析1 apk文件逆向","text":"当比对完hash后，接下来就是对整个apk进行逆向了。首先我们对“一份礼物.apk”进行逆向 需要的工具 Jadx分析apk文件结构apk本质上是一个加了签名和元数据的压缩包，用普通的解压工具解压即可得到内部的文件。内部的文件结构如下所示：123456789.├── AndroidManifest.xml├── META-INF├── assets├── classes.dex├── com├── lib├── lua└── res 再看看/assets下的文件：123456.├── icon.png├── init.lua├── layout.lua├── main.lua└── mc.mp3 mc.mp3就是O泡果奶的广告音频。 查看app信息我们打AndroidManifest.xml，查看apk包名等信息。AndroidManifest.xml文件如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.lc.nb&quot; android:versionCode=&quot;9&quot; android:versionName=&quot;凉城fork by Keven&quot;&gt; &lt;uses-sdk android:minSdkVersion=&quot;21&quot; android:targetSdkVersion=&quot;21&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;uses-permission android:name=&quot;&quot;/&gt; &lt;application android:label=&quot;一份礼物&quot; android:icon=&quot;@drawable/icon&quot; android:name=&quot;com.androlua.LuaApplication&quot; android:persistent=&quot;true&quot; android:largeHeap=&quot;true&quot; android:resizeableActivity=&quot;true&quot; android:supportsPictureInPicture=&quot;true&quot;&gt; &lt;meta-data android:name=&quot;android.max_aspect&quot; android:value=&quot;4&quot;/&gt; &lt;activity android:theme=&quot;@style/Theme.Holo.Light.NoActionBar&quot; android:label=&quot;插件9.0&quot; android:name=&quot;com.androlua.Main&quot; android:screenOrientation=&quot;user&quot; android:configChanges=&quot;keyboardHidden|orientation|screenSize&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt; &lt;action android:name=&quot;android.intent.action.EDIT&quot;/&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt; &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot;/&gt; &lt;data android:scheme=&quot;file&quot;/&gt; &lt;data android:host=&quot;*&quot;/&gt; &lt;data android:pathPattern=&quot;.*\\\\.alp&quot;/&gt; &lt;/intent-filter&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt; &lt;action android:name=&quot;android.intent.action.EDIT&quot;/&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt; &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot;/&gt; &lt;data android:scheme=&quot;content&quot;/&gt; &lt;data android:host=&quot;*&quot;/&gt; &lt;data android:pathPattern=&quot;.*\\\\.alp&quot;/&gt; &lt;/intent-filter&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt; &lt;action android:name=&quot;android.intent.action.EDIT&quot;/&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt; &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot;/&gt; &lt;data android:scheme=&quot;file&quot;/&gt; &lt;data android:mimeType=&quot;application/*&quot;/&gt; &lt;data android:mimeType=&quot;audio/*&quot;/&gt; &lt;data android:mimeType=&quot;video/*&quot;/&gt; &lt;data android:mimeType=&quot;text/*&quot;/&gt; &lt;data android:mimeType=&quot;*/*&quot;/&gt; &lt;data android:host=&quot;*&quot;/&gt; &lt;data android:pathPattern=&quot;.*\\\\.alp&quot;/&gt; &lt;/intent-filter&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt; &lt;action android:name=&quot;android.intent.action.EDIT&quot;/&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt; &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot;/&gt; &lt;data android:scheme=&quot;content&quot;/&gt; &lt;data android:host=&quot;*&quot;/&gt; &lt;data android:mimeType=&quot;application/*&quot;/&gt; &lt;data android:mimeType=&quot;audio/*&quot;/&gt; &lt;data android:mimeType=&quot;video/*&quot;/&gt; &lt;data android:mimeType=&quot;text/*&quot;/&gt; &lt;data android:mimeType=&quot;*/*&quot;/&gt; &lt;data android:pathPattern=&quot;.*\\\\.alp&quot;/&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;activity android:theme=&quot;@style/Theme.Translucent.NoTitleBar&quot; android:name=&quot;com.tencent.connect.common.AssistActivity&quot; android:screenOrientation=&quot;behind&quot; android:configChanges=&quot;keyboardHidden|orientation&quot;/&gt; &lt;activity android:name=&quot;com.tencent.tauth.AuthActivity&quot; android:launchMode=&quot;singleTask&quot; android:noHistory=&quot;true&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt; &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot;/&gt; &lt;data android:scheme=&quot;tencent222222&quot;/&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;activity android:theme=&quot;@style/Theme.Holo.Light.NoActionBar&quot; android:label=&quot;插件9.0&quot; android:name=&quot;com.androlua.LuaActivity&quot; android:configChanges=&quot;keyboardHidden|orientation|screenSize&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt; &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot;/&gt; &lt;data android:scheme=&quot;&quot;/&gt; &lt;data android:host=&quot;com.andlua.ly&quot;/&gt; &lt;/intent-filter&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt; &lt;action android:name=&quot;android.intent.action.EDIT&quot;/&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt; &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot;/&gt; &lt;data android:scheme=&quot;file&quot;/&gt; &lt;data android:host=&quot;*&quot;/&gt; &lt;data android:pathPattern=&quot;&quot;/&gt; &lt;/intent-filter&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt; &lt;action android:name=&quot;android.intent.action.EDIT&quot;/&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt; &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot;/&gt; &lt;data android:scheme=&quot;content&quot;/&gt; &lt;data android:host=&quot;*&quot;/&gt; &lt;data android:pathPattern=&quot;&quot;/&gt; &lt;/intent-filter&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt; &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot;/&gt; &lt;data android:scheme=&quot;file&quot;/&gt; &lt;data android:mimeType=&quot;text/*&quot;/&gt; &lt;data android:host=&quot;*&quot;/&gt; &lt;data android:pathPattern=&quot;&quot;/&gt; &lt;/intent-filter&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.VIEW&quot;/&gt; &lt;category android:name=&quot;android.intent.category.DEFAULT&quot;/&gt; &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot;/&gt; &lt;data android:scheme=&quot;content&quot;/&gt; &lt;data android:mimeType=&quot;text/*&quot;/&gt; &lt;data android:host=&quot;*&quot;/&gt; &lt;data android:pathPattern=&quot;&quot;/&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;activity android:theme=&quot;@style/Theme.Holo.Light.NoActionBar&quot; android:label=&quot;一份礼物&quot; android:name=&quot;com.androlua.LuaActivityX&quot; android:excludeFromRecents=&quot;false&quot; android:screenOrientation=&quot;portrait&quot; android:configChanges=&quot;keyboardHidden|orientation|screenSize&quot; android:documentLaunchMode=&quot;intoExisting&quot;/&gt; &lt;activity android:theme=&quot;@style/Theme.NoDisplay&quot; android:label=&quot;一份礼物&quot; android:name=&quot;com.androlua.Welcome&quot; android:screenOrientation=&quot;portrait&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;activity android:theme=&quot;@style/Theme.Translucent.NoTitleBar&quot; android:name=&quot;com.branch.www.screencapture.ScreenCaptureActivity&quot;/&gt; &lt;service android:name=&quot;com.androlua.LuaService&quot; android:enabled=&quot;true&quot;/&gt; &lt;service android:label=&quot;一份礼物&quot; android:name=&quot;com.androlua.LuaAccessibilityService&quot; android:permission=&quot;&quot; android:enabled=&quot;true&quot; android:exported=&quot;true&quot;&gt; &lt;meta-data android:name=&quot;android.accessibilityservice&quot; android:resource=&quot;@xml/accessibility_service_config&quot;/&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.accessibilityservice.AccessibilityService&quot;/&gt; &lt;category android:name=&quot;android.accessibilityservice.category.FEEDBACK_AUDIBLE&quot;/&gt; &lt;category android:name=&quot;android.accessibilityservice.category.FEEDBACK_HAPTIC&quot;/&gt; &lt;category android:name=&quot;android.accessibilityservice.category.FEEDBACK_SPOKEN&quot;/&gt; &lt;/intent-filter&gt; &lt;/service&gt; &lt;provider android:name=&quot;android.content.FileProvider&quot; android:exported=&quot;false&quot; android:authorities=&quot;com.lc.nb&quot; android:grantUriPermissions=&quot;true&quot;&gt; &lt;meta-data android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot; android:resource=&quot;@anim/abc_fade_out&quot;/&gt; &lt;/provider&gt; &lt;/application&gt;&lt;/manifest&gt; 可以看到作者把ID留在了versionName里，心够大的。以及可以看到申请的权限只有储存权限，这样看来估计没有窃取信息等行为了。不过 package=&quot;com.lc.nb&quot; 凉城NB！（个鬼） 使用Jadx对整个apk进行逆向下载好Jadx后，用它打开这个apk看，一键反编译，自动反混淆！文件里有很多第三方包，看上去很可疑。 定位入口文件注意AndroidManifest.xml中的这一个标签： 123456&lt;activity android:theme=&quot;@style/Theme.Holo.Light.NoActionBar&quot; android:label=&quot;插件9.0&quot; android:name=&quot;com.androlua.Main&quot; android:screenOrientation=&quot;user&quot; android:configChanges=&quot;keyboardHidden|orientation|screenSize&quot;&gt; 可见入口文件在com.android.Main中。那么打开看看：确定了，这是AndroidLua应用，而/asset中的lua脚本才是本体。OK，先到这里，下次我们重点解析作为本体的lua文件。","link":"/2020/10/14/O%E6%B3%A1%E6%9E%9C%E5%A5%B6app%E8%A7%A3%E6%9E%901_apk%E6%96%87%E4%BB%B6%E9%80%86%E5%90%91/"},{"title":"“O泡果奶”app解析2 lua文件解密与反编译","text":"当发现lua文件才是本体后，接下来的步骤就是解析lua文件，但预料之中这个过程远比我预想的要困难 尝试直接打开lua文件我们先尝试直接打开main.lua:???lua不是门脚本语言吗，为什么像用记事本打开二进制文件一样的全是乱码？一通Google之后，我发现原来lua是可以编译为字节码的，编译后文件叫做luac。那么反编译不就行了？ 尝试反编译于是我用unluac反编译时，得到了这个：意思是这不是luac文件喽？二进制文件的文件头都会标注文件类型，那用16进制编辑器打开看看：没有文件头？既然没有文件头，程序却能以lua文件运行，那只能说明被加密了。 解密luac文件但我在外壳程序怎么都找不到解密的代码。绝望的我只好上知乎寻找已经逆向成功的大佬。幸好，一位好心的大佬一语点醒梦中人： 请无视那个“2条回复”。第二条是我成功后对他的感谢 那意思是这个apk和去年那个几乎一样喽？不管了先试试吧。 于是经过一下午的百度后，我找到了这篇文章：这位博主根据壳里的解密代码写了一个程序： 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;unsigned char *decrypt(const unsigned char *buff, size_t size) { unsigned char *buff1 = (unsigned char *) malloc(size); buff1[0] = 27; int t = 0; for (int i = 1; i &lt; size; i++) { t += size; buff1[i] = buff[i] ^ (t + ((unsigned int) (((unsigned long) (-2139062143LL * t) &gt;&gt; 32) + t) &gt;&gt; 7) + ((signed int) (((unsigned long) (-2139062143LL * t) &gt;&gt; 32) + t) &lt; 0)); } return buff1;}unsigned char buff[20480];int main(int argc, char *argv[]) { char filename[20] = &quot;main.lua&quot;; if (argc == 2) strcpy(filename,argv[1]); printf(&quot;File name: %s \\n&quot;, filename); FILE *fp = fopen(filename, &quot;rb&quot;); size_t size = 0; size = fread(buff, sizeof(unsigned char), 20480, fp); printf(&quot;File size: %ld \\n&quot;, size); unsigned char *res = decrypt(buff, size); strcat(filename, &quot;c&quot;); FILE *fp1 = fopen(filename, &quot;wb&quot;); fwrite(res, sizeof(unsigned char), size, fp1); printf(&quot;Output: %s&quot;, filename); return 0;} 按照这篇blog的使用方法，编译后运行，果然成功解密了。 还原lua文件那么就能成功反编译了。以下是main.lua反编译后的代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139local L0, L1, L2, L3L0 = requireL1 = &quot;import&quot;L0(L1)L0 = importL1 = &quot;android.app.*&quot;L0(L1)L0 = importL1 = &quot;android.os.*&quot;L0(L1)L0 = importL1 = &quot;android.widget.*&quot;L0(L1)L0 = importL1 = &quot;android.view.*&quot;L0(L1)L0 = importL1 = &quot;android.view.View&quot;L0(L1)L0 = importL1 = &quot;android.content.Context&quot;L0(L1)L0 = importL1 = &quot;android.media.MediaPlayer&quot;L0(L1)L0 = importL1 = &quot;android.media.AudioManager&quot;L0(L1)L0 = importL1 = &quot;com.androlua.Ticker&quot;L0(L1)L0 = activityL0 = L0.getSystemServiceL1 = ContextL1 = L1.AUDIO_SERVICEL0 = L0(L1)L0 = L0.setStreamVolumeL1 = AudioManagerL1 = L1.STREAM_MUSICL2 = 15L3 = AudioManagerL3 = L3.FLAG_SHOW_UIL0(L1, L2, L3)L0 = activityL0 = L0.getDecorViewL0 = L0()L0 = L0.setSystemUiVisibilityL1 = ViewL1 = L1.SYSTEM_UI_FLAG_HIDE_NAVIGATIONL2 = ViewL2 = L2.SYSTEM_UI_FLAG_IMMERSIVEL1 = L1 | L2L0(L1)L0 = MediaPlayerL0 = L0()m = L0L0 = mL0 = L0.resetL0()L0 = mL0 = L0.setDataSourceL1 = activityL1 = L1.getLuaDirL1 = L1()L2 = &quot;/mc.mp3&quot;L1 = L1 .. L2L0(L1)L0 = mL0 = L0.prepareL0()L0 = mL0 = L0.startL0()L0 = mL0 = L0.setLoopingL1 = trueL0(L1)L0 = TickerL0 = L0()ti = L0L0 = tiL0.Period = 10L0 = tifunction L1() local L0, L1, L2, L3 L0 = activity L0 = L0.getSystemService L1 = Context L1 = L1.AUDIO_SERVICE L0 = L0(L1) L0 = L0.setStreamVolume L1 = AudioManager L1 = L1.STREAM_MUSIC L2 = 15 L3 = AudioManager L3 = L3.FLAG_SHOW_UI L0(L1, L2, L3) L0 = activity L0 = L0.getDecorView L0 = L0() L0 = L0.setSystemUiVisibility L1 = View L1 = L1.SYSTEM_UI_FLAG_HIDE_NAVIGATION L2 = View L2 = L2.SYSTEM_UI_FLAG_IMMERSIVE L1 = L1 | L2 L0(L1)endL0.onTick = L1L0 = tiL0 = L0.startL0()function L0(A0, A1) local L2, L3, L4, L5 L2 = string L2 = L2.find L3 = tostring L4 = A1 L3 = L3(L4) L4 = &quot;KEYCODE_BACK&quot; L2 = L2(L3, L4) if L2 ~= nil then L2 = activity L2 = L2.getSystemService L3 = Context L3 = L3.AUDIO_SERVICE L2 = L2(L3) L2 = L2.setStreamVolume L3 = AudioManager L3 = L3.STREAM_MUSIC L4 = 15 L5 = AudioManager L5 = L5.FLAG_SHOW_UI L2(L3, L4, L5) end L2 = true return L2endonKeyDown = L0 别问我那些L0，L1哪来的，这是unluac自己加的，而且我也懒得修饰了。 关于其它的lua文件以下是同文件夹内的另一个lua文件init.lua： 1234567891011local L0, L1appname = &quot;\\230\\143\\146\\228\\187\\1829.0&quot;appver = &quot;9.0&quot;packagename = &quot;com.ta.cnm&quot;appcode = &quot;9&quot;appsdk = &quot;15&quot;theme = &quot;Theme_DeviceDefault_Light_NoActionBar&quot;L0 = {}L1 = &quot;WRITE_EXTERNAL_STORAGE&quot;L0[1] = L1user_permission = L0 写在后面关于这个app与去年“927”中那个app的区别，我会在后面说明的。下一篇我们来逆向另外一“存档人物修改2.0.apk”","link":"/2020/10/21/O%E6%B3%A1%E6%9E%9C%E5%A5%B6app%E8%A7%A3%E6%9E%902_lua%E6%96%87%E4%BB%B6%E8%A7%A3%E5%AF%86%E4%B8%8E%E5%8F%8D%E7%BC%96%E8%AF%91/"},{"title":"LFS 的搭建 0 前言","text":"前言其实一开始要搭建 LFS 时，我是拒绝的。但奈何自己手贱加学校的教务系统出问题，我同时选择了操作系统和操作系统课程设计。而正常情况下是不能同时选择的。而操作系统课程设计的大作业，就是搭 LFS。也罢，这也是我的终极目标，虽然早了点，时间还被一大堆大作业和实验报告占满了，还有 ddl 催命。于是，我就只能硬着头皮上了。 选择的版本秉承要安装就要最新版的原则，我选择了最新的11.0对了，是 systemd 版本的。不过根据现在 LCTT 的进度，中文版最新到 9.0，因此 11.0 的版本只能硬啃生肉。当然，不同版本之间差距应该并不大，所以我会参考中文最新版的就是了。也许这一波流程后我就可以去 LCTT 翻译文档了吧。 XD 需要的工具首先，当然是一份 LFS 文档（对于 LFS 的搭建，需要一个宿主机，目前选择为我现在在服务器上跑的 Gentoo 开发机。当然也可以选择用 liveCD，不过考虑到 LFS 要装很长时间，liveCD 并不好用。至于要安装的机器，当然是虚拟机啦，配置如下： CPU：Intel G5420 4线程 amd64 内存：4G SCSI 控制器：LSI 53C895A 硬盘：32G，挂载到宿主机的 /mnt/lfs/ 网卡：Realtek RTL8139 BIOS：OVMF (UEFI) 考虑到兼容性，目前不使用任何半虚拟化驱动 主要安装流程LFS 的安装一般分为以下几个流程： 准备工作：包括分区和编译临时工具链 安装：手动编译各软件包 配置：配置各种各样的配置文件 具体流程其实和安装 Gentoo 差不多，但 LFS 既不会帮你自动编译也不提供 stage。可谓是真·从零开始。 与标准 LFS 流程的改动我在安装 LFS时，不会完全按照文档进行。首先，我可能会使用一些其他发行版的工具，比如 Gentoo 的 genkernel 之类的（虽然这玩意真的很难用）以及我会大量使用已经存在的配置文件，比如其他发行版的 fstab 等我也会参考 Gentoo 或 Arch 等相关 wiki，毕竟这些文档可是相当好用的。 最后撒，开始吧。","link":"/2021/11/15/lfs%E6%90%AD%E5%BB%BA0/"},{"title":"从零开始搭建 Home Lab 0 硬件的选择与架构方案的确定","text":"前言搭建 Home Lab 的想法，起源于我有一次运行虚拟机的时候。虽然我现在的主力笔记本性能不差，16G 内存 + 256G SSD，但众所周知 Chrome 是著名的性能消耗大户，导致我的内存有一半被它吞了；而且由于笔记本上安装的重型软件和游戏实在太多了，尤其是游戏，占了 60G+ 的空间，导致剩余硬盘空间捉襟见肘。因此每一次使用虚拟机时，都要扣扣索索的盘算着分配的内存和虚拟磁盘的容量。更令人恼火的是，每次创建虚拟机，都要删掉一个游戏或者是占用了大量磁盘空间的软件，而且每次跑虚拟机只是测试一下而已，没过多久就要删，而删去虚拟机的时候再去下载这些程序是十分痛苦的事情。因此我便产生了专门买服务器跑虚拟机的想法。而搭建 Home Lab 的另外一个原因，是因为折腾。曾经我一直在一台 10 年前购入的 Lenovo 笔记本上跑 Gentoo，但由于各 种 各 样的原因，Gentoo 一直没安装成功，这称为了我心中的一根刺；而且我手头缺少一台 Linux 开发机，虽然 WSL 已经能满足大部分需求，但有些东西是 WSL 做不到的。而搭建一台 Home Lab，能做到All in One，开发机什么的将不再是问题。 虽然缺少 Linux 开发机是一个伪需求…… 对于Home Lab的需求既然要选择买服务器搭建 Home Lab，那就一步到位吧。那我对 Home Lab的需求是什么呢？ NAS。我喜欢屯资源，什么无损音乐，番剧电影，盗版游戏加起来快有几百 G 了，虽然手头有个 2T 的移动硬盘，但每一次连接和卸载移动硬盘十分麻烦；而且我经常挂机下载，一挂机就是几天，对于笔记本而言总会有稳定性问题，用专用的机器进行显然要好很多。 开发机。毕竟我要折腾 Gentoo，天天跑编译，CPU 性能还是挺重要的，至少成品 NAS 常用的 Atom，赛扬会有些吃力。 测试机。有时我需要一台 Windows 测试机试毒养蛊，有时又会开一台 Linux 虚拟机折腾。不过由于只是测试，性能需求会小很多。 硬件的选择本人学生党，对硬件的选择自然是越便宜越好，但在金钱与性能之间权衡是一件很痛苦的事情。死来想去，确认了如下方案。 服务器主机看了几个月，最终确认了购入服务器的型号：HPE ProLiant MicroServer Gen10 Plus。为什么要选择这台机器呢？ 小。机身设计十分紧凑，应该是四盘位微型服务器的极限了，而且高度只有它的前代产品的一半左右。放在宿舍里也不占空间，也容易搬。 性能不差。高配的版本使用的 E3-2200 CPU 性能肯定不辍，但多达 71W 的 TDP 和价钱使我果断放弃，但低配的 G5420 性能也不差。 易于拆装和升级。不像一部分 NAS 将 CPU 焊在主板上，这台机器 CPU 可以拆卸，而且接口是 LGA1151，虽然不能换大部分至强 CPU，但可以装大部分桌面级 CPU 和一部分 E3，并且高性能服务器级 CPU 与我无缘。虽然我不会上桌面级的 U，但至少还有的选。内存标准最大容量 32G，而且实测最高可以到 64G（当然也与选择的 CPU 有关）。两个标准的 DDR4 内存插槽，支持双通道和 ECC。此外还配有一个标准的 PCI-E 3.0 插槽和一个专用于 ILO 的阉割版 PCI-E 插槽（等于除了插 ILO 网卡外没什么用）。不过这也是它的一个缺点。（但至少还有一个插槽不是吗？） 我的机器是在闲鱼上买的二手未开封机器，相比与狗东上 6000+ 的价格，闲鱼上的价格只有三分之二，而且和全新的没区别。（除了容易被坑，毕竟虽然只有三分之二还是 将近 4000 RMB，被骗了就真的难受了。） 内存与硬盘内存本来是准备一条 16G 的，但下单的时候没注意买成了两条，于是变成了 32G。型号的光威奕 PRO，国产颗粒。虽说支持国产是一个因素，但更重要的原因是便宜。至于硬盘，由于要建 NAS，硬盘不敢买差的，于是选择了 2T 的希捷酷狼和一个金士顿的 128G SATA SSD 用作系统盘。 网络设备由于要开各种网络服务，一个路由器是很有必要的，但只需要有就行了。不过由于需要校园网拨号，于是买了一个二手小娱 C3 刷 Open WRT，不到 100 RMB。 系统架构的确定曾经我打算在主机上直接装 Gentoo，其他的开虚拟机，但毕竟实验/开发环境天天挂，最后还是选择在主机上装 Hypervisor，各种服务跑虚拟机上的方案。这个 Hypervisor 将同时运行至少两台虚拟机，NAS 和开发机。有时还要同时运行测试机和跑各种 docker/LXC 的虚拟机。Hypervisor 我最终选择了 Proxmox VE。这玩意如果不订阅每次登录都要弹警告很烦人，因此我曾一度打算装 kvm 和 qemu 自己糊，但实际用起来后我直呼真香。NAS 我选择了OpenMediaVault，开发机不用多说自然是 Gentoo。","link":"/2021/03/28/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhomelab0/"},{"title":"从零开始搭建 Home Lab 1 HPE Gen 10 Plus 安装与配置","text":"主机的拆卸这是 HPE Gen 10 Plus 正面：前面板背后是四个横置的硬盘柜，面板上铭牌处的凹槽其实是个提手，往外一拉就可以拆卸。在外壳打开后侧面会有两个卡扣用以锁定前面板防止在正常使用时把面板抽出来（虽然可能性很小）。左下角是两个 USB3.2 接口，而且据称在后面的 USB 插槽还有空余的时候就不会识别插在这两个端口的 WTG 设备。 具体可以参考这篇文章：[整机搭建] &lt;更新软件篇&gt;HPE ProLiant MicroServer Gen10 Plus 开箱与扩展 主机的背后是风扇和各种插槽。包括四个 USB 2.0 插槽，一个 VGA 接口，一个 DP 1.0 接口，四个 RJ45 端口，速度应该是千兆。此外还有两个预置插槽，但上面的是 ILO 网卡预置的，下面的才是标准 PCI-E。机身背后有两颗手拧螺丝和两颗涂黑的螺丝。卸下手拧螺丝后就可以卸下外壳，但只有在卸下那两颗黑色的螺丝后才能抽出主板。 整台机器的所有螺丝都是六角形的，但有一字刻痕，所以没有六角螺丝刀的话也可以试试大一些的一字螺丝刀。 这是抽出主板后的侧面照：上面的内存就是用了国产颗粒的光威奕 Pro：包装也是充满中国风的： 硬盘柜是标准 3.5 英寸的。不过当我把硬盘插在上面的口时，硬盘一晃一晃的，有点糟心。不过范围很小，只要不是天天搬机器玩应该问题不大。不过如果要插 2.5 英寸的硬盘就只能买硬盘盒了。不要买硬盘支架！ SATA 接口是固定在硬盘柜内侧的，而一般的支架是为用连接线的硬盘柜而设计的，如果非要装的话，硬盘柜的接口与硬盘接口会有近 1 厘米的偏差。老老实实买硬盘盒吧，别贪便宜。 ILO 破解卡主机上的 ILO 不是直接能用的，按正常方法，开启 ILO只能插专用的 ILO 网卡。这玩意在某宝/某鱼上不到 50 块就能买。但，也有邪门的方法。根据这篇文章，只需短接两个端口，就可以以共享网卡的形式使用 ILO。如果动手能力强的话，可以在槽内插铜线或者飞线，不过前者不稳定后者要改回来又太麻烦。于是有位老哥自己画了一个破解卡的 PCB 设计图，送去嘉立创 5 块钱就可以激活 ILO。这是原帖： [NAS] HPE MicroServer Gen10+ ILO5破解卡制作方式共享，包括电路板文件 这是我自己下单的成品： 也就是说 ILO 控制芯片是集成在主板内的，那个 ILO 网卡里只有一个网卡模块。反正我觉得这个网卡纯属智商税…… ILO 设置在设置 ILO 前，路由器要先分配静态 IP，毕竟没人想每次登录都要进路由器看看 IP 不是？开机按 F9 和 F10 都可以进入 BIOS。不过按 F9 是直接的 BIOS 界面，F10 进入的是 Intelligent Provisioning 界面。后者界面更友好也支持鼠标操作。有鼠标的话建议后者。如果使用共享端口的话，请注意这个端口只能是端口 1 或 2 而且默认是 1。","link":"/2021/03/31/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhomelab1/"},{"title":"从零开始搭建 Home Lab 2 Proxmox VE 的搭建","text":"在硬件和 BIOS 配置完成后，就要着手开始搭建 Hypervisor 了。因为要跑的客户机基本都是 Linux，所以使用基于 KVM 和 QEMU 的 Hypervisor 显然要更好。所以我选择了 PVE，虽然每次管理都要看一遍订阅提醒就很烦。 当然，用 QEMU 加上 WebVirtMgr 自己糊一个 Hypervisor 也是可以的，我之前本来要使用这个方案的。但毕竟稳定性最重要，而自己糊的肯定比不上专业的，而且看了看 PVE 的手册后……真香。 Proxmox VE 的安装 本 Blog 不会写出完整安装过程，只有在安装时的注意事项和各种坑。毕竟安装这玩意就比安装 Debian 复杂一点，看手册就行了。推荐这篇 Proxmox VE 6.2 的翻译版手册，虽然是 6.2 版本稍微有点老，但可参考性还是不用担心的。这里是链接：Proxmox6.2中文手册在此感谢翻译该手册的大佬。 挂载安装 ISOHPE Gen 10 Plus 具有网络挂载 ISO 的功能，直接提供 ISO 的 URL 就行了。但这功能只有在网速极快（比如千兆/万兆内网内有装有 ISO 的 NAS）的环境下才有意义。如果在大多数情况下使用该功能的话，就是一杯茶，一包烟，ISO 载入看一天了。 因为这个功能是直接挂载，而不是下载到本地再加载。毕竟想想也是，硬盘都还没分区表呢下载的文件放哪？天真的我之前一度以为这功能是自动下载后在加载……蠢哭了。 所以老老实实做启动 U 盘吧。记得插在机器后面的 USB 插槽上。当然，从 Debian 上安装 Proxmox VE 也是可以的，但此处不过多说明，详情请见手册。 分区设置Proxmox VE 的分区设置很奇怪，坑也很多，所以我也没研究透，但此处我在此写下我遇到的坑以及些许建议。首先，安装 PVE 时，只能在一块盘上进行分区，所以像我这样有多硬盘的数据盘在安装完成后再分区吧。在选择分区硬盘的旁边有 Options 的高级设置，可以设置分区的文件系统，但此处不建议改动，最多取消掉 swap 分区（此机器的 Hypervisor 上使用 swap 没有意义，尤其是我上了 32G 内存），除非你知道自己在做什么。在 PVE 的默认分区方案下，硬盘会分别生成一个 bios 启动分区，一个 EFI 分区，剩下的空间会被划分为叫做 pve 的 lVM 卷组，里面是 root, data, swap 逻辑卷。对于 data 卷，该分区就是 PVE 存储各种数据的分区，在安装后的管理界面上有两个卷，分别是 local 和 local-lvm，就是在 data 卷里的。其中 local 卷存储各种 ISO 镜像和容器模板，而 local-lvm 则存储虚拟机硬盘和容器。如要取消 swap，则将 Options 中的 swapsize 设置为 0。当然，在多硬盘情况下，可以取消 data 卷，将 maxvz 设置为 0 即可（但我没试验过，慎用）。 别问我为什么会同时有 bios 启动分区和 esp，我也不知道。 地点，时区设置PVE 的地点设置不是选择的，需要自己输入，输入 China 就好。对于时区，选择 Asia/Shanghai 或 Asia/Hong_Kong 都行，都是 GMT+8。 安装后的配置网络管理界面PVE 的网络管理界面地址默认是本机 IP:8006，开机后机器如果链接 tty 的话会显示这个地址。 用户在 PVE 的管理界面，设置用户很简单，但在我的使用场景下，只用 root 就足够了。如果有多个用户要维护 PVE 的话，可以看看 PVE 复杂的权限系统。 ZFS 配置管理界面创建 zpool 储存池也很方便，单盘创建 zpool 或创建 raidz 都不难，还可以设置各种参数和选项，比如我就打开了压缩功能。对了，zpool 创建时是以硬盘为单位，创建 zpool 需要至少一块硬盘。此外，ZFS 对内存的要求很高，现在推荐的使用 ZFS 的最小内存容量为基础 4G，zpool 总容量每 1T 额外加 1G。而且 ZFS 在使用时会将大量内存用作缓存，我的机器平时运行就用了 20G+，而其中虚拟机的内存一共 10G。不过可以设置 ZFS 的内存使用上限，在 /etc/modprobe.d/zfs.conf 中输入options zfs zfs_arc_max=[number]即可。[number]为你想要设置的上限。当然，也可以为储存池设置 SSD 缓存盘或 ZIL 日志盘，比如在我的分区方案下，SSD 上不设置 data 卷，剩余空间作为缓存盘，可以改善 ZFS 的性能。 但我还是想把一部分虚拟机硬盘放在 SSD 上。","link":"/2021/05/05/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhomelab2/"},{"title":"从零开始搭建 Home Lab 3 安装 Gentoo 中的那些坑","text":"当 Proxmox VE 已经搭建完成后，就可以准备开发机了。 创建虚拟机其实 PVE 虚拟机创建向导很舒服，在一般情况下照着来就行。但对于 Gentoo，从这里开始就有坑了。首先是 CPU，这个虽然不是坑，但这是我的一个小小的建议，将 CPU 类型设置为 host。毕竟由于 Gentoo 的特性，可以针对 CPU 进行优化，对于像好好玩 Gentoo 的人来说，个人认为这一点蛮重要的。而且由于要编译嘛，CPU 性能能榨干一点是一点。此外就是各驱动了。千万不要选 VirtIO 驱动！除非你第一次安装就自己配置内核而且不使用 genkernel 生成的 initramfs。因为以前被坑过无数次了，所以这次第一次安装我选择 genkernel 直接搞定。而 genkernel 在不加参数的情况下是不会选中任何 virtIO 相关选项的……（这是我后来才知道的）。所以如果不想被 genkernel 坑死的话就不要上 virtIO 驱动，至少安装系统时不要选。 安装 Gentoo 的指导本文不会完整记录安装 Gentoo 的流程，因为相比于我自己写的，官方的安装手册要专业得多。而对于大多数流程来说，参考手册就行了。此外，相比几年前 Gentoo 安装手册中的不完整而且烂的翻译，现在的中文手册已经看不到英文了，而且中文的翻译质量也不差。所以大可以安心照手册安装，不会有什么让人摸不着头脑的地方的。此处为安装手册的链接：Gentoo AMD64 Handbook 感谢每一位翻译贡献者的努力！ 安装 Gentoo 的过程由于我本次安装使用的 init 是 systemd，而手册默认是为 openRC 准备的，因此我会写下不同于手册的，有关于 systemd 的配置。 选择 stage3如果要用 systemd 的话，记得选带 systemd 的 stage3。虽然使用 openRC 的也行，但是切换完配置后会下载编译 systemd 及其相关依赖，挺耗时间的。对了，建议到镜像站下载，比如 tuna。 分区由于 PVE 默认使用 SeaBIOS，所以就不用 ESP 了。但如果硬盘使用 GPT 的话记得加一个 BIOS 启动分区。 选择配置文件如果你使用的是最新的 stage3 而且类型选择正确的话，这一步是可以跳过的。不过保险起见，还是用eselect profile list看一眼吧。如果你发现系统默认的配置文件不是你想要的话，恭喜你，你多半选错 stage3 了！但其实也没什么，重新选择配置就行了，就是要多等一会了（指至少 1 小时，具体时间取决于机器配置，XD。 locale 配置在更改/etc/locale.gen，运行locale-gen后，最后的选择 locale 就不能按照手册来了。直接修改/创建/etc/locale.conf，在里面输入LANG=&quot;en_US.utf8&quot;即可。 此处非常不建议选择有关 zh_CN 的任何 locale。除非在安装时就安装好了桌面环境并确保一旦重新启动就能进入桌面，不然就等着满屏幕的口口口吧。 内核配置如果在这时配置 kernel 也是可以的，但我更喜欢在系统能正常使用的时候再折腾，所以使用 genkernel 一条龙服务吧。而如果选择 genkernel 的话，之前的驱动选择就十分重要了。当然，如果你和我一样在安装时选择了 virtIO 驱动，很快就会看到我之前被卡了无数次的错误，以及 genkernel 对于 virtIO 无尽的坑。 主机名与 machine IDsystemd 需要一个 machine ID，运行systemd-machine-id-setup。对于主机名，直接在/etc/hostname写就行了。默认该文件是自己创建的，所以看到 nano 显示是新文件时不用惊慌。对了，记得把/etc/hosts中的localhost改为自己的主机名。 网络配置如果使用 dhcp 的话，记得重启后一波systemctl enable dhcpcd.service和systemctl start dhcpcd.service二连就行。但如果你和我一样使用静态 IP 的话，就不能使用 dhcpcd 了。 其实按照 wiki，是可以使用 dhcpcd 配置静态 IP 的，但我尝试了没成功。 此处使用 systemd-networkd 配置静态 IP。在/etc/systemd/network下创建 network 配置文件，比如下面的配置文件20-wired.network： 12345678[Match]Name=enp1s0[Network]Address=10.1.10.9/24Gateway=10.1.10.1DNS=10.1.10.1#DNS=8.8.8.8 记得把Name改为自己的网卡名称。对了，重启后也要进行systemctl enable systemd-networkd.service与systemctl start systemd-networkd.service二连。 日志工具因为 systemd 已经自带了，所以手册关于安装日志工具的部分跳过就好。 关于错误：block device is not a valid root device 的解决方法如果你和我一样在安装时 scsi 控制器选择了 virtIO 驱动时，就会在开机时看到以下类似错误： 12345/dev/loop0: TYPE=&quot;squashfs&quot;/dev/sda2: UUID=&quot;eefd6088-354b-4b5b-97d8-5df2df******&quot; TYPE=&quot;swap&quot; PARTLABEL=&quot;primary&quot; PARTUUID=&quot;ea452ed8-8b99-4a26-a662-ab43c******&quot;............block device is not a valid root device 并且只能进入紧急命令行。不要急，进入紧急命令行，看看/dev/下有什么。如果我没猜错，安装根文件的 sda，要么不见了，要么变成了 hda。对于我的情况，是直接不见了。这种情况一般是 scsi 控制器出问题了，而且多半是驱动问题，导致根文件所在的硬盘无法加载。而我的情况是，内核没有打入任何 virtIO 驱动，initramfs 也没有。这就是 genkernel 对于 virtIO 的巨坑，因为它对 genkernel 支持不佳，内核编译时不会选中相关选项，就算自己选上了，在制作 initramfs 时也不会打入 virtIO 相关模块。如果想要 genkernel 加上 virtIO 选项以及在 initramfs 中打入相关模块，请加上--virtio的选项。同时，要自己配置内核时，也要选中 virtIO 的相关选项。具体可参见User:Flow/Gentoo as KVM guest","link":"/2021/05/12/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhomelab3/"},{"title":"在 Proxmox VE 中添加 vTPM 的支持","text":"！！注意 ！！PVE 7.0 已经添加了 TPM 支持，只需在 Web 界面添加设备即可。本文已经过时！本文已经过时！本文已经过时！ 前言虽然 Windows 11 的镜像早就泄露了，但在 6 月 24 日 23 点 Microsoft 才正式发布。发布会结束后，MS 官网放出了 Windows 11 的系统要求，其中一个必须要求是 TPM 2.0。然而，Proxmox VE 并没有官方支持 vTPM ， 虽然有qemu 有相应支持，但网上对此的文档很少。因此，本文在此写出让 PVE 支持 qemu vTPM 的方法以在虚拟机安装 Windows 11 预览版。 关于 Proxmox VE 对 TPM 虚拟化的支持目前，qemu 已经通过 swtpm 支持了 vTPM ，但Proxmox 对此的支持还在开发中，并且预期时间未知。（Proxmox 工作人员的最近回复在今年 1 月。）但可以安装 swtpm 并手动改配置文件，就是有亿点麻烦。具体情况见这里。不过 PVE 对 qemu vTPM 支持的要求已经上 bug 追踪列表了。耐心等吧，总会有的。Bugzilla – Bug 3075 编译与安装 swtpm在 Debian 下编译安装 swtpm下载源码swtpm 有一个依赖 libtpms 也需要单独编译安装，这里也一起安装了。swtpm 的源码: git clone https://github.com/stefanberger/swtpm.git libtpms 的源码: git clone https://github.com/stefanberger/libtpms.git 签出到稳定分支查看分支 $ git branch -a 签出时选择最新的稳定版即可。在写这篇文章时最新版是0.6 $ git checkout stable-0.6 （这是签出 swtpm 的命令，libtpms 请自行选择版本） 编译安装 libtpms安装依赖: sudo apt-get -y install automake autoconf libtool gcc build-essential libssl-dev dh-exec pkg-config gawk 编译: 123./autogen.sh --with-opensslmv debian/source debian/source.olddpkg-buildpackage -us -uc -j4 之后回到父目录，就可以看见 libtpms 的 deb 包了。安装： sudo dpkg -i libtpms0_0*_amd64.deb libtpms-dev_0*_amd64.deb 编译 swtpm安装依赖： sudo apt-get -y install libfuse-dev libglib2.0-dev libgmp-dev expect libtasn1-dev socat tpm-tools python3-twisted gnutls-dev gnutls-bin libjson-glib-dev python3-setuptools softhsm2 libseccomp-dev 编译： dpkg-buildpackage -us -uc -j$(nproc) 编译后软件包介绍编译完成后，编译父目录会生成很多包，其中以下几个包是最终使用的： libtpms-dev_*_amd64.deb 这个应该是 swtpm 的编译依赖，但还是装在生产环境上吧，我也不清楚。 libtpms0_*_amd64.deb以上两个包是 libtpms swtpm-libs_*_amd64.deb swtpm_*_amd64.deb swtpm-tools_*_amd64.deb以上是 swtpm 其它的包就不用装了，用于 debug 的。 福利已经有人写好一键安装脚本了，在这里：rayures/vTPM仅用于 Debian/Ubuntu。 Gentoo 下的编译portage 中是有 swtpm 的 ebuild 的，但被~amd64 mask 了。 因此，生产环境慎用！！！ 将 keyword 加入 /etc/portage/package.keywords =app-crypt/swtpm-0.5.2 ~amd64 =dev-libs/libtpms-0.8.3 ~amd64 此时运行 sudo emerge --ask swtpm 即可。 在 PVE 中添加 swtpm 设备首先当然是把编译好的 deb 包装到 PVE 上。记得用dpkg --info看看依赖，尤其是swtpm-tools。在安装swtpm-tools时注意先安装它的依赖，不然 dpkg 后再安装依赖的话就会出现循环依赖。swtpm 可以通过套接字/字符设备/CUSE 让 guest 访问 TPM。此处使用这个脚本创建套接字设备: 12345678910111213#!/bin/bashi=0while [ -d /tmp/tpm$i ]; dolet i=i+1donetpm=/tmp/tpm$imkdir $tpmecho &quot;Starting $tpm&quot;sudo swtpm socket -d --tpmstate dir=$tpm --tpm2 \\ --ctrl type=unixio,path=/$tpm/swtpm-sock &amp;sleep 2 # this should be changed to a netstat query 之后应该可以在/tmp/下看见设备。 为虚拟机添加设备获取 VNC 端口号： 我也不知道这是什么，但后面添加参数需要这个数字，求大佬告知。 12345678#!/bin/bashvncport=0port=5900while nc -z 127.0.0.1 $port; do port=$((port + 1)) vncport=$((vncport + 1))doneecho $vncport 之后再虚拟机配置文件里加一行： args: -drive file=${disk},format=raw,if=virtio,cache=none -chardev socket,id=chrtpm,path=/$tpm/swtpm-sock -tpmdev emulator,id=tpm0,chardev=chrtpm -device tpm-tis,tpmdev=tpm0 -vnc :$nextvnc -m 2048 ${disk}为虚拟机磁盘镜像路径，$tpm为 tpm 设备路径，$nextvnc是上面脚本的输出。全部为绝对路径。启动虚拟机，就可以再 sealBIOS 里看到TPM 设置了。 关于脚本的说明脚本不是我写的，原帖在这里：S3hh’s Blog但该脚本似乎无法直接使用，于是我把它拆成上面的几个脚本和操作。 存在的问题进行上述操作后，如果将虚拟机以裸机启动后再强行关机，会导致无法再启动，需要重新创建设备。","link":"/2021/06/24/%E5%9C%A8pve%E4%B8%AD%E5%A2%9E%E5%8A%A0%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AF%B9tpm%E7%9A%84%E6%94%AF%E6%8C%81/"}],"tags":[{"name":"博客","slug":"博客","link":"/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Android","slug":"Android","link":"/tags/Android/"},{"name":"逆向工程","slug":"逆向工程","link":"/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"},{"name":"杂谈","slug":"杂谈","link":"/tags/%E6%9D%82%E8%B0%88/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"LFS","slug":"LFS","link":"/tags/LFS/"},{"name":"硬件","slug":"硬件","link":"/tags/%E7%A1%AC%E4%BB%B6/"},{"name":"网络","slug":"网络","link":"/tags/%E7%BD%91%E7%BB%9C/"},{"name":"Proxmox VE","slug":"Proxmox-VE","link":"/tags/Proxmox-VE/"},{"name":"Gentoo","slug":"Gentoo","link":"/tags/Gentoo/"}],"categories":[{"name":"博客搭建","slug":"博客搭建","link":"/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"Android","slug":"Android","link":"/categories/Android/"},{"name":"LFS","slug":"LFS","link":"/categories/LFS/"},{"name":"Home Lab","slug":"Home-Lab","link":"/categories/Home-Lab/"},{"name":"杂谈","slug":"杂谈","link":"/categories/%E6%9D%82%E8%B0%88/"}]}